name: Build
on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build-buildozer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load Cache
        uses: actions/cache/restore@v3
        with:
          path: ./.buildozer
          key: ${{ runner.os }}-buildozer-${{ hashFiles('./buildozer.spec') }}



      - name: Build with Buildozer
        uses: ArtemSBulgakov/buildozer-action@v1
        with:
          repository-root: main
          workdir: .
          buildozer-version: stable
          command: |
            buildozer android update || true
            find ./.buildozer -name "gradle-wrapper.properties" && \
            find ./.buildozer -name "gradle-wrapper.properties" -exec sed -i 's|gradle-[0-9.]*-all.zip|gradle-8.7-bin.zip|g' {} \; || true
            buildozer android release
        env:
          USER: root
          PIP_BREAK_SYSTEM_PACKAGES: '1'  # This is needed for Ubuntu 24.04 and later to allow pip to upgrade packages

      - name: Fix file permissions
        run: |  
          sudo chown -R $USER:$USER ./bin/
          sudo chown -R $USER:$USER ./.buildozer/
          # If you also want to cache .buildozer directory
          sudo chown -R $USER:$USER ./.buildozer/ || true 
      
      - name: Save Cache
        if: always()
        uses: actions/cache/save@v3
        with:
          path: ./.buildozer
          key: ${{ runner.os }}-buildozer-${{ hashFiles('./buildozer.spec') }}
        env:
          USER: root


      - name: Release Branch
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.event.release.tag_name || 'not-tagged' }}
          release_name: Release ${{ github.event.release.tag_name || 'not-tagged' }}
          body_path: ./release_notes/${{ github.event.release.tag_name || 'default' }}.md
          draft: false
          prerelease: false

      - name: Find APK
        id: apk
        run: echo "APK=$(ls ./bin/*.apk | head -n 1)" >> $GITHUB_ENV

      - name: Upload Release APK
        id: upload-release-apk
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ env.APK }}
          asset_name: parking-register.apk
          asset_content_type: application/vnd.android.package-archive